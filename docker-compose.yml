services:
  # Certificate Generation Service
  certgen-api:
    build:
      context: .
      dockerfile: services/certgen_api/Dockerfile
    container_name: certgen-api
    ports:
      - "8080:8080"
    volumes:
      - ./ca:/ca
      - ./issued:/issued
      - ./services/certgen_api/logs:/app/logs
    environment:
      - CA_CN=${CA_CN} # Common Name for the CA
      - CA_EXPIRY=${CA_EXPIRY} # CA validity in days
      - BROKER_CN=${BROKER_CN} # Common Name for the MQTT broker
      - BROKER_EXPIRY=${BROKER_EXPIRY} # Broker certificate validity in days
      - DEVICE_EXPIRY=${DEVICE_EXPIRY} # Device certificate validity in days
      - OPENSSL_CNF=/ca/openssl.cnf # Path to OpenSSL configuration file
      - CA_KEY=/ca/ca.key # Path to CA private key
      - CA_CERT=/ca/ca.crt # Path to CA certificate
    networks:
      - iot-network

  # MQTT Broker with mTLS Security
  mqtt-broker:
    build: ./services/mqtt_broker
    container_name: mqtt-broker
    depends_on:
      - certgen-api
    ports:
      - "8883:8883"
    volumes:
      - ./services/mqtt_broker/mosquitto.conf:/mosquitto/config/mosquitto.conf # Main configuration file
      - ./services/mqtt_broker/acl:/mosquitto/config/acl # Access Control List configuration
      - ./services/mqtt_broker/data:/mosquitto/data # Data directory for Mosquitto
      - ./services/mqtt_broker/log:/mosquitto/log # Log directory for Mosquitto
      - ./ca:/mosquitto/certs # CA certificate for mTLS
    networks:
      - iot-network
    restart: unless-stopped

  # MQTTX Client for Monitoring
  mqtt-logger:
    

  # FACES2 Device Simulator with mTLS
  faces2-controllers:
    build:
      context: .
      dockerfile: services/faces2_controllers/Dockerfile
    container_name: faces2-controllers
    depends_on:
      - certgen-api
      - mqtt-broker
    environment:
      - BROKER_CN=${BROKER_CN} # Broker certificate CN for SSL validation
      - MQTT_BROKER_HOST=mqtt-broker # MQTT broker hostname
      - CERTGEN_API_HOST=certgen-api # Certificate generation API hostname (fixed service name)
      - PUBLISH_INTERVAL=5 # Sensor data publishing interval in seconds
    volumes:
      - ./services/faces2_controllers/certs:/app/certs
    networks:
      - iot-network
    restart: unless-stopped

  # # Zookeeper for Kafka
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.0
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - iot-network

  # # Kafka
  # kafka:
  #   image: confluentinc/cp-kafka:7.4.0
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  #   networks:
  #     - iot-network

  # # PostgreSQL for device parameters
  # postgres:
  #   image: postgres:15
  #   container_name: device-params-db
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB:-VT_DeviceManagement}
  #     POSTGRES_USER: ${POSTGRES_USER:-postgres}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - iot-network

  # # TimescaleDB for time-series data
  # timescaledb:
  #   image: timescale/timescaledb:latest-pg15
  #   container_name: timescale-db
  #   environment:
  #     POSTGRES_DB: timeseries
  #     POSTGRES_USER: ts_user
  #     POSTGRES_PASSWORD: ts_password
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - timescale_data:/var/lib/postgresql/data
  #     - ./sql/timescale_init.sql:/docker-entrypoint-initdb.d/timescale_init.sql
  #   networks:
  #     - iot-network

  # # MQTT to Kafka Connector
  # mqtt-kafka-connector:
  #   build: ./services/mqtt_kafka_connector
  #   container_name: mqtt-kafka-connector
  #   depends_on:
  #     - mosquitto
  #     - kafka
  #   environment:
  #     MQTT_BROKER: mosquitto:1883
  #     MQTT_USERNAME: iot_user
  #     MQTT_PASSWORD: f6yksL+gDk1iexPUnBZvgf3V
  #     MQTT_TOPIC_PATTERN: #
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     KAFKA_TOPIC: raw_iot_data
  #   networks:
  #     - iot-network
  #   restart: unless-stopped

  # # Data Processing Service
  # data-processor:
  #   build:
  #     context: .
  #     dockerfile: services/data_processor/Dockerfile
  #   container_name: data-processor
  #   depends_on:
  #     - kafka
  #     - postgres
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     POSTGRES_HOST: postgres
  #     POSTGRES_DB: ${POSTGRES_DB:-db_arnm}
  #     POSTGRES_USER: ${POSTGRES_USER:-postgres}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
  #   networks:
  #     - iot-network
  #   restart: unless-stopped

  # # Kafka to TimescaleDB Sink
  # kafka-timescale-sink:
  #   build:
  #     context: .
  #     dockerfile: services/kafka_timescale_sink/Dockerfile
  #   container_name: kafka-timescale-sink
  #   depends_on:
  #     - kafka
  #     - timescaledb
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     TIMESCALE_HOST: timescaledb
  #     TIMESCALE_DB: timeseries
  #     TIMESCALE_USER: ts_user
  #     TIMESCALE_PASSWORD: ts_password
  #   networks:
  #     - iot-network
  #   restart: unless-stopped

networks:
  iot-network:
    driver: bridge