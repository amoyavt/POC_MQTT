# Secure Docker Compose configuration with secrets management
# Use this file for production deployments
version: '3.8'

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  timescale_password:
    file: ./secrets/timescale_password.txt
  mqtt_username:
    file: ./secrets/mqtt_username.txt
  mqtt_password:
    file: ./secrets/mqtt_password.txt

services:
  # MQTT Broker with authentication
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/passwd:/mosquitto/config/passwd
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    secrets:
      - mqtt_username
      - mqtt_password
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-p", "1883", "-t", "test", "-m", "healthcheck", "-u", "$(cat /run/secrets/mqtt_username)", "-P", "$(cat /run/secrets/mqtt_password)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka with optimized configuration
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # Performance optimizations
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      # JVM settings
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      KAFKA_JVM_PERFORMANCE_OPTS: "-XX:+UseG1GC -XX:MaxGCPauseMillis=20"
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PgBouncer for connection pooling
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: pgbouncer
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER:-postgres}
      DATABASES_PASSWORD_FILE: /run/secrets/postgres_password
      DATABASES_DBNAME: ${POSTGRES_DB:-db_arnm}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 100
      DEFAULT_POOL_SIZE: 20
    secrets:
      - postgres_password
    depends_on:
      - postgres
    ports:
      - "6432:5432"  # PgBouncer port
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # PostgreSQL with secrets
  postgres:
    image: postgres:15
    container_name: device-params-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-db_arnm}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - iot-network
    # Remove external port exposure for security
    # ports:
    #   - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TimescaleDB with secrets
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescale-db
    environment:
      POSTGRES_DB: timeseries
      POSTGRES_USER: ts_user
      POSTGRES_PASSWORD_FILE: /run/secrets/timescale_password
    secrets:
      - timescale_password
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./sql/timescale_init.sql:/docker-entrypoint-initdb.d/timescale_init.sql
    networks:
      - iot-network
    # Remove external port exposure for security
    # ports:
    #   - "5433:5432"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ts_user"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MQTT to Kafka Connector with authentication
  mqtt-kafka-connector:
    build: 
      context: ./services/mqtt_kafka_connector
      dockerfile: Dockerfile.secure
    container_name: mqtt-kafka-connector
    depends_on:
      - mosquitto
      - kafka
    environment:
      MQTT_BROKER: mosquitto:1883
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: raw_iot_data
      # Kafka optimization
      KAFKA_BATCH_SIZE: 16384
      KAFKA_LINGER_MS: 10
      KAFKA_BUFFER_MEMORY: 33554432
      KAFKA_COMPRESSION_TYPE: snappy
      KAFKA_RETRIES: 3
      KAFKA_MAX_IN_FLIGHT: 5
    secrets:
      - mqtt_username
      - mqtt_password
    networks:
      - iot-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "python", "-c", "import paho.mqtt.client as mqtt; exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Processing Service with connection pooling and caching
  data-processor:
    build:
      context: .
      dockerfile: services/data_processor/Dockerfile.secure
    container_name: data-processor
    depends_on:
      - kafka
      - pgbouncer
      - redis
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      POSTGRES_HOST: pgbouncer  # Use PgBouncer instead of direct connection
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-db_arnm}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      # Redis caching
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_TTL: 600  # 10 minutes
      # Performance optimization
      KAFKA_MAX_POLL_RECORDS: 500
      KAFKA_SESSION_TIMEOUT_MS: 30000
      PROCESSING_THREADS: 4
    secrets:
      - postgres_password
    networks:
      - iot-network
    restart: unless-stopped
    deploy:
      replicas: 2  # Scale for better performance
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "python", "-c", "import psycopg2; exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka to TimescaleDB Sink with optimized batching
  kafka-timescale-sink:
    build:
      context: .
      dockerfile: services/kafka_timescale_sink/Dockerfile.secure
    container_name: kafka-timescale-sink
    depends_on:
      - kafka
      - timescaledb
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DB: timeseries
      TIMESCALE_USER: ts_user
      TIMESCALE_PASSWORD_FILE: /run/secrets/timescale_password
      # Optimized batch processing
      BATCH_SIZE: 1000  # Increased from 100
      BATCH_TIMEOUT: 10  # Increased from 5
      # Connection pooling
      DB_POOL_SIZE: 10
      DB_POOL_MIN: 2
    secrets:
      - timescale_password
    networks:
      - iot-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "python", "-c", "import psycopg2; exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # F2 Device Simulator with authentication
  f2-simulator:
    build: 
      context: ./services/f2_simulator
      dockerfile: Dockerfile.secure
    container_name: f2-simulator
    depends_on:
      - mosquitto
    environment:
      MQTT_BROKER: mosquitto:1883
      SIMULATION_INTERVAL: 5
      DEVICE_COUNT: 3
    secrets:
      - mqtt_username
      - mqtt_password
    networks:
      - iot-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  mosquitto_data:
  mosquitto_logs:
  postgres_data:
  timescale_data:
  redis_data:

networks:
  iot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16